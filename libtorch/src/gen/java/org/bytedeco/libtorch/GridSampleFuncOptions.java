// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;


/** Options for {@code torch::nn::functional::grid_sample}.
 * 
 *  Example:
 *  <pre>{@code
 *  namespace F = torch::nn::functional;
 *  F::grid_sample(input, grid, F::GridSampleFuncOptions().mode(torch::kBilinear).padding_mode(torch::kZeros).align_corners(true));
 *  }</pre> */
@Namespace("torch::nn::functional") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class GridSampleFuncOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public GridSampleFuncOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public GridSampleFuncOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GridSampleFuncOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public GridSampleFuncOptions position(long position) {
        return (GridSampleFuncOptions)super.position(position);
    }
    @Override public GridSampleFuncOptions getPointer(long i) {
        return new GridSampleFuncOptions(this).position(position + i);
    }


  /** interpolation mode to calculate output values. Default: Bilinear */
  /** padding mode for outside grid values. Default: Zeros */
  /** Specifies perspective to pixel as point. Default: false */
}
