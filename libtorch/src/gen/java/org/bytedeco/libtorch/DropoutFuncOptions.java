// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;


/** Options for {@code torch::nn::functional::dropout}.
 * 
 *  Example:
 *  <pre>{@code
 *  namespace F = torch::nn::functional;
 *  F::dropout(input, F::DropoutFuncOptions().p(0.5));
 *  }</pre> */
@Namespace("torch::nn::functional") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class DropoutFuncOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DropoutFuncOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DropoutFuncOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DropoutFuncOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DropoutFuncOptions position(long position) {
        return (DropoutFuncOptions)super.position(position);
    }
    @Override public DropoutFuncOptions getPointer(long i) {
        return new DropoutFuncOptions(this).position(position + i);
    }

  /** The probability of an element to be zeroed. Default: 0.5 */

  /** can optionally do the operation in-place. Default: False */
}
