// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.LongPointer;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;
import org.bytedeco.javacpp.annotation.StdVector;

import java.nio.LongBuffer;


/** Options for {@code torch::nn::functional::pad}.
 * 
 *  Example:
 *  <pre>{@code
 *  namespace F = torch::nn::functional;
 *  F::pad(input, F::PadFuncOptions({1, 2, 2, 1, 1, 2}).mode(torch::kReplicate));
 *  }</pre> */
@Namespace("torch::nn::functional") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class PadFuncOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PadFuncOptions(Pointer p) { super(p); }


  public PadFuncOptions(@Cast("int64_t*") @StdVector LongPointer pad) { super((Pointer)null); allocate(pad); }
  private native void allocate(@Cast("int64_t*") @StdVector LongPointer pad);
  public PadFuncOptions(@Cast("int64_t*") @StdVector LongBuffer pad) { super((Pointer)null); allocate(pad); }
  private native void allocate(@Cast("int64_t*") @StdVector LongBuffer pad);
  public PadFuncOptions(@Cast("int64_t*") @StdVector long[] pad) { super((Pointer)null); allocate(pad); }
  private native void allocate(@Cast("int64_t*") @StdVector long[] pad);

  /** m-elements tuple, where m/2 <= input dimensions and m is even. */

  /** "constant", "reflect", "replicate" or "circular". Default: "constant" */

  /** fill value for "constant" padding. Default: 0 */
}
