// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;


/** Options for the {@code Upsample} module.
 * 
 *  Example:
 *  <pre>{@code
 *  Upsample model(UpsampleOptions().scale_factor(std::vector<double>({3})).mode(torch::kLinear).align_corners(false));
 *  }</pre> */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class UpsampleOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public UpsampleOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public UpsampleOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UpsampleOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public UpsampleOptions position(long position) {
        return (UpsampleOptions)super.position(position);
    }
    @Override public UpsampleOptions getPointer(long i) {
        return new UpsampleOptions(this).position(position + i);
    }

  /** output spatial sizes. */

  /** multiplier for spatial size. */

  /** the upsampling algorithm: one of "nearest", "linear", "bilinear",
   *  "bicubic" and "trilinear". Default: "nearest" */

  /** if "True", the corner pixels of the input and output tensors are
   *  aligned, and thus preserving the values at those pixels. This only has
   *  effect when :attr:{@code mode} is "linear", "bilinear", or
   *  "trilinear". Default: "False" */
}
