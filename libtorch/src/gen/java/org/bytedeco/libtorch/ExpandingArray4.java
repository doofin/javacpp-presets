// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.*;

@Name("torch::ExpandingArray<4>") @NoOffset @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class ExpandingArray4 extends Pointer {
    static { Loader.load(); }

  /** Constructs an {@code ExpandingArray} from an {@code initializer_list}. The extent of
   *  the length is checked against the {@code ExpandingArray}'s extent parameter {@code D}
   *  at runtime. */
  /*implicit*/

  /** Constructs an {@code ExpandingArray} from an {@code std::vector}. The extent of
   *  the length is checked against the {@code ExpandingArray}'s extent parameter {@code D}
   *  at runtime. */
  /*implicit*/ public ExpandingArray4(@StdVector T vec) { super((Pointer)null); allocate(vec); }
private native void allocate(@StdVector T vec);

  /** Constructs an {@code ExpandingArray} from an {@code at::ArrayRef}. The extent of
   *  the length is checked against the {@code ExpandingArray}'s extent parameter {@code D}
   *  at runtime. */
  /*implicit*/ public ExpandingArray4(@ByVal @Cast("at::ArrayRef<T>*") Pointer values) { super((Pointer)null); allocate(values); }
private native void allocate(@ByVal @Cast("at::ArrayRef<T>*") Pointer values);

  /** Constructs an {@code ExpandingArray} from a single value, which is repeated {@code D}
   *  times (where {@code D} is the extent parameter of the {@code ExpandingArray}). */
  /*implicit*/

  /** Constructs an {@code ExpandingArray} from a correctly sized {@code std::array}. */
  /*implicit*/

  /** Accesses the underlying {@code std::array}. */
  public native @Cast("std::array<T,4>*") @ByRef @Name("operator *") Pointer multiply();

  /** Accesses the underlying {@code std::array}. */

  /** Accesses the underlying {@code std::array}. */
  public native @Cast("std::array<T,4>*") @Name("operator ->") Pointer access();

  /** Accesses the underlying {@code std::array}. */

  /** Returns an {@code ArrayRef} to the underlying {@code std::array}. */
  public native @ByVal @Cast("at::ArrayRef<T>*") @Name("operator at::ArrayRef<T>") Pointer asPointer();

  /** Returns the extent of the {@code ExpandingArray}. */
  public native @Cast("size_t") @NoException long size();
}
