// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;
 // namespace functional

// ============================================================================

/** Options for the {@code MultiMarginLoss} module.
 * 
 *  Example:
 *  <pre>{@code
 *  MultiMarginLoss model(MultiMarginLossOptions().margin(2).weight(weight));
 *  }</pre> */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class MultiMarginLossOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MultiMarginLossOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MultiMarginLossOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MultiMarginLossOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MultiMarginLossOptions position(long position) {
        return (MultiMarginLossOptions)super.position(position);
    }
    @Override public MultiMarginLossOptions getPointer(long i) {
        return new MultiMarginLossOptions(this).position(position + i);
    }


  /** Has a default value of :math:{@code 1}. :math:{@code 1} and :math:{@code 2}
   *  are the only supported values. */
  /** Has a default value of :math:{@code 1}. */
  /** A manual rescaling weight given to each
   *  class. If given, it has to be a Tensor of size {@code C}. Otherwise, it is
   *  treated as if having all ones. */
  /** Specifies the reduction to apply to the output:
   *  {@code }'none'{@code } | {@code }'mean'{@code } | {@code }'sum'{@code }. {@code }'none'{@code }: no reduction will be applied,
   *  {@code }'mean'{@code }: the sum of the output will be divided by the number of
   *  elements in the output, {@code }'sum'{@code }: the output will be summed. Default: {@code }'mean'{@code } */
}
