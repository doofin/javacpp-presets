// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;


/** Options for the {@code EmbeddingBag} module.
 * 
 *  Example:
 *  <pre>{@code
 *  EmbeddingBag model(EmbeddingBagOptions(10, 2).max_norm(2).norm_type(2.5).scale_grad_by_freq(true).sparse(true).mode(torch::kSum));
 *  }</pre> */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class EmbeddingBagOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EmbeddingBagOptions(Pointer p) { super(p); }

  public EmbeddingBagOptions(@Cast("int64_t") long num_embeddings, @Cast("int64_t") long embedding_dim) { super((Pointer)null); allocate(num_embeddings, embedding_dim); }
  private native void allocate(@Cast("int64_t") long num_embeddings, @Cast("int64_t") long embedding_dim);

  /** The size of the dictionary of embeddings. */
  /** The size of each embedding vector. */
  /** If given, each embedding vector with norm larger than {@code max_norm} is renormalized to have norm {@code max_norm}. */
  /** The p of the p-norm to compute for the {@code max_norm} option. Default {@code }2{@code }. */
  /** If given, this will scale gradients by the inverse of frequency of the words in the mini-batch. Default {@code }false{@code }.
   *  Note: this option is not supported when {@code }mode="kMax"{@code }. */
  /** {@code }"kSum"{@code }, {@code }"kMean"{@code } or {@code }"kMax"{@code }. Specifies the way to reduce the bag. {@code }"kSum"{@code } computes the weighted sum, taking {@code per_sample_weights}
   *  into consideration. {@code }"kMean"{@code } computes the average of the values in the bag, {@code }"kMax"{@code } computes the max value over each bag. */
  /** If {@code }true{@code }, gradient w.r.t. {@code weight} matrix will be a sparse tensor.
   *  Note: this option is not supported when {@code }mode="kMax"{@code }. */
  /** The learnable weights of the module of shape (num_embeddings, embedding_dim) */
  /** If {@code }true{@code }, {@code offsets} has one additional element, where the last element
   *  is equivalent to the size of {@code indices}. This matches the CSR format. Note:
   *  this option is currently only supported when {@code }mode="sum"{@code }. */
}
