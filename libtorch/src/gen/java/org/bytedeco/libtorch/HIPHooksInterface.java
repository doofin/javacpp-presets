// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;
import org.bytedeco.javacpp.annotation.UniquePtr;


// The HIPHooksInterface is an omnibus interface for any HIP functionality
// which we may want to call into from CPU code (and thus must be dynamically
// dispatched, to allow for separate compilation of HIP code).  See
// CUDAHooksInterface for more detailed motivation.
@Namespace("at") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class HIPHooksInterface extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public HIPHooksInterface() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public HIPHooksInterface(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HIPHooksInterface(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public HIPHooksInterface position(long position) {
        return (HIPHooksInterface)super.position(position);
    }
    @Override public HIPHooksInterface getPointer(long i) {
        return new HIPHooksInterface(this).position(position + i);
    }

  // This should never actually be implemented, but it is used to
  // squelch -Werror=non-virtual-dtor

  // Initialize THHState and, transitively, the HIP state
  

  public native @UniquePtr GeneratorImpl initHIPGenerator(Context arg0);

  public native @Cast("bool") boolean hasHIP();

  public native @Cast("int64_t") long current_device();

  

  public native void registerHIPTypes(Context arg0);

  public native int getNumGPUs();
}
