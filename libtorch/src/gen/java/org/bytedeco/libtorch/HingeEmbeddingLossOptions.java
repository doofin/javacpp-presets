// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;
 // namespace functional

// ============================================================================

/** Options for the {@code HingeEmbeddingLoss} module.
 * 
 *  Example:
 *  <pre>{@code
 *  HingeEmbeddingLoss model(HingeEmbeddingLossOptions().margin(4).reduction(torch::kNone));
 *  }</pre> */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class HingeEmbeddingLossOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public HingeEmbeddingLossOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public HingeEmbeddingLossOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HingeEmbeddingLossOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public HingeEmbeddingLossOptions position(long position) {
        return (HingeEmbeddingLossOptions)super.position(position);
    }
    @Override public HingeEmbeddingLossOptions getPointer(long i) {
        return new HingeEmbeddingLossOptions(this).position(position + i);
    }


  /** Specifies the threshold for which the distance of a negative sample must
   *  reach in order to incur zero loss. Default: 1 */
  /** Specifies the reduction to apply to the output. Default: Mean */
}
