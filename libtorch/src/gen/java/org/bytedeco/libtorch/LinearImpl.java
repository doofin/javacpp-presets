// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.*;


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Linear ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/** Applies a linear transformation with optional bias.
 *  See https://pytorch.org/docs/master/nn.html#torch.nn.Linear to learn
 *  about the exact behavior of this module.
 * 
 *  See the documentation for {@code torch::nn::LinearOptions} class to learn what
 *  constructor arguments are supported for this module.
 * 
 *  Example:
 *  <pre>{@code
 *  Linear model(LinearOptions(5, 2).bias(false));
 *  }</pre> */
@Namespace("torch::nn") @NoOffset @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class LinearImpl extends CloneableLinearImpl {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LinearImpl(Pointer p) { super(p); }

  public LinearImpl(@Cast("int64_t") long in_features, @Cast("int64_t") long out_features) { super((Pointer)null); allocate(in_features, out_features); }
  private native void allocate(@Cast("int64_t") long in_features, @Cast("int64_t") long out_features);
  public LinearImpl(@Const @ByRef LinearOptions options_) { super((Pointer)null); allocate(options_); }
  private native void allocate(@Const @ByRef LinearOptions options_);

  public native void reset();

  public native void reset_parameters();

  /** Pretty prints the {@code Linear} module into the given {@code stream}. */
  public native void pretty_print(@Cast("std::ostream*") @ByRef Pointer stream);

  /** Transforms the {@code input} tensor by multiplying with the {@code weight} and
   *  optionally adding the {@code bias}, if {@code with_bias} is true in the options. */
  public native @ByVal Tensor forward(@Const @ByRef Tensor input);

  /** The options used to configure this module. */
  public native @ByRef LinearOptions options(); public native LinearImpl options(LinearOptions setter);

  /** The learned weight. */
  public native @ByRef Tensor weight(); public native LinearImpl weight(Tensor setter);

  /** The learned bias. If {@code bias} is false in the {@code options}, this tensor is
   *  undefined. */
  public native @ByRef Tensor bias(); public native LinearImpl bias(Tensor setter);
}
