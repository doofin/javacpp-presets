// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;


/** Options for the {@code BatchNorm} module. */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class BatchNormOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BatchNormOptions(Pointer p) { super(p); }

  /* implicit */ public BatchNormOptions(@Cast("int64_t") long num_features) { super((Pointer)null); allocate(num_features); }
private native void allocate(@Cast("int64_t") long num_features);

  /** The number of features of the input tensor.
   *  Changing this parameter after construction __has no effect__. */

  /** The epsilon value added for numerical stability.
   *  Changing this parameter after construction __is effective__. */

  /** A momentum multiplier for the mean and variance.
   *  Changing this parameter after construction __is effective__. */

  /** Whether to learn a scale and bias that are applied in an affine
   *  transformation on the input.
   *  Changing this parameter after construction __has no effect__. */

  /** Whether to store and update batch statistics (mean and variance) in the
   *  module.
   *  Changing this parameter after construction __has no effect__. */
}
