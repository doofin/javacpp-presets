// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;
 // namespace functional

// ============================================================================

/** Options for the {@code CTCLoss} module.
 * 
 *  Example:
 *  <pre>{@code
 *  CTCLoss model(CTCLossOptions().blank(42).zero_infinity(false).reduction(torch::kSum));
 *  }</pre> */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class CTCLossOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CTCLossOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CTCLossOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CTCLossOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CTCLossOptions position(long position) {
        return (CTCLossOptions)super.position(position);
    }
    @Override public CTCLossOptions getPointer(long i) {
        return new CTCLossOptions(this).position(position + i);
    }


  /** blank label. Default {@code 0}. */
  /** Specifies the reduction to apply to the output. Default: Mean */
  /** Whether to zero infinite losses and the associated gradients.
   *  Default: {@code false}. Infinite losses mainly occur when the inputs are
   *  too short to be aligned to the targets. */
}
