// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.*;

@Name("torch::ExpandingArrayWithOptionalElem<4>") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class ExpandingArrayWithOptionalElem4 extends Pointer {
    static { Loader.load(); }


  /** Constructs an {@code ExpandingArrayWithOptionalElem} from an {@code initializer_list} of the underlying type {@code T}.
   *  The extent of the length is checked against the {@code ExpandingArrayWithOptionalElem}'s extent parameter {@code D}
   *  at runtime. */
  /*implicit*/

  /** Constructs an {@code ExpandingArrayWithOptionalElem} from an {@code std::vector} of the underlying type {@code T}.
   *  The extent of the length is checked against the {@code ExpandingArrayWithOptionalElem}'s extent parameter {@code D}
   *  at runtime. */
  /*implicit*/ public ExpandingArrayWithOptionalElem4(@StdVector T vec) { super((Pointer)null); allocate(vec); }
private native void allocate(@StdVector T vec);

  /** Constructs an {@code ExpandingArrayWithOptionalElem} from an {@code at::ArrayRef} of the underlying type {@code T}.
   *  The extent of the length is checked against the {@code ExpandingArrayWithOptionalElem}'s extent parameter {@code D}
   *  at runtime. */
  /*implicit*/ public ExpandingArrayWithOptionalElem4(@ByVal @Cast("at::ArrayRef<T>*") Pointer values) { super((Pointer)null); allocate(values); }
private native void allocate(@ByVal @Cast("at::ArrayRef<T>*") Pointer values);

  /** Constructs an {@code ExpandingArrayWithOptionalElem} from a single value of the underlying type {@code T},
   *  which is repeated {@code D} times (where {@code D} is the extent parameter of the {@code ExpandingArrayWithOptionalElem}). */
  /*implicit*/

  /** Constructs an {@code ExpandingArrayWithOptionalElem} from a correctly sized {@code std::array} of the underlying type {@code T}. */
  /*implicit*/
}
