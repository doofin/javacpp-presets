// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;
 // namespace functional

// ============================================================================

/** Options for the {@code PoissonNLLLoss} module.
 * 
 *  Example:
 *  <pre>{@code
 *  PoissonNLLLoss model(PoissonNLLLossOptions().log_input(false).full(true).eps(0.42).reduction(torch::kSum));
 *  }</pre> */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class PoissonNLLLossOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PoissonNLLLossOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PoissonNLLLossOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PoissonNLLLossOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PoissonNLLLossOptions position(long position) {
        return (PoissonNLLLossOptions)super.position(position);
    }
    @Override public PoissonNLLLossOptions getPointer(long i) {
        return new PoissonNLLLossOptions(this).position(position + i);
    }


  /** if true the loss is computed as {@code exp(input) - target * input},
   *  if false the loss is {@code input - target * log(input + eps)}. */
  /** whether to compute full loss, i.e. to add the Stirling approximation term
   *  target * log(target) - target + 0.5 * log(2 * pi * target). */
  /** Small value to avoid evaluation of {@code log(0)} when {@code log_input = false}.
   *  Default: 1e-8 */
  /** Specifies the reduction to apply to the output. Default: Mean */
}
