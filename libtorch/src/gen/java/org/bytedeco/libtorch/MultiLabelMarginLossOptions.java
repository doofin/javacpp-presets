// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.ByVal;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;
 // namespace functional

// ============================================================================

/** Options for the {@code MultiLabelMarginLoss} module.
 * 
 *  Example:
 *  <pre>{@code
 *  MultiLabelMarginLoss model(MultiLabelMarginLossOptions(torch::kNone));
 *  }</pre> */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class MultiLabelMarginLossOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MultiLabelMarginLossOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MultiLabelMarginLossOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MultiLabelMarginLossOptions position(long position) {
        return (MultiLabelMarginLossOptions)super.position(position);
    }
    @Override public MultiLabelMarginLossOptions getPointer(long i) {
        return new MultiLabelMarginLossOptions(this).position(position + i);
    }


  public MultiLabelMarginLossOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
public MultiLabelMarginLossOptions(@ByVal kNone reduction) { super((Pointer)null); allocate(reduction); }
private native void allocate(@ByVal kNone reduction);
public MultiLabelMarginLossOptions(@ByVal kMean reduction) { super((Pointer)null); allocate(reduction); }
private native void allocate(@ByVal kMean reduction);
public MultiLabelMarginLossOptions(@ByVal kSum reduction) { super((Pointer)null); allocate(reduction); }
private native void allocate(@ByVal kSum reduction);

  /** Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'.
   *  'none': no reduction will be applied, 'mean': the sum of the output will
   *  be divided by the number of elements in the output, 'sum': the output will
   *  be summed. Default: 'mean' */
}
