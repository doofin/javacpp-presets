// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;
 // namespace functional

// ============================================================================

/** Options for the {@code TripletMarginLoss} module.
 * 
 *  Example:
 *  <pre>{@code
 *  TripletMarginLoss model(TripletMarginLossOptions().margin(3).p(2).eps(1e-06).swap(false));
 *  }</pre> */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class TripletMarginLossOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TripletMarginLossOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TripletMarginLossOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TripletMarginLossOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TripletMarginLossOptions position(long position) {
        return (TripletMarginLossOptions)super.position(position);
    }
    @Override public TripletMarginLossOptions getPointer(long i) {
        return new TripletMarginLossOptions(this).position(position + i);
    }


  /** Specifies the threshold for which the distance of a negative sample must
   *  reach in order to incur zero loss. Default: 1 */
  /** Specifies the norm degree for pairwise distance. Default: 2 */
  /** The distance swap is described in detail in the paper Learning shallow
   *  convolutional feature descriptors with triplet losses by V. Balntas,
   *  E. Riba et al. Default: False */
  /** Specifies the reduction to apply to the output. Default: Mean */
}
