// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;


/** Options for {@code torch::nn::functional::batch_norm}.
 * 
 *  Example:
 *  <pre>{@code
 *  namespace F = torch::nn::functional;
 *  F::batch_norm(input, mean, variance, F::BatchNormFuncOptions().weight(weight).bias(bias).momentum(0.1).eps(1e-05).training(false));
 *  }</pre> */
@Namespace("torch::nn::functional") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class BatchNormFuncOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BatchNormFuncOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BatchNormFuncOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BatchNormFuncOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BatchNormFuncOptions position(long position) {
        return (BatchNormFuncOptions)super.position(position);
    }
    @Override public BatchNormFuncOptions getPointer(long i) {
        return new BatchNormFuncOptions(this).position(position + i);
    }


  /** A momentum multiplier for the mean and variance.
   *  Changing this parameter after construction __is effective__. */

  /** The epsilon value added for numerical stability.
   *  Changing this parameter after construction __is effective__. */
}
