// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;
 // namespace functional

// ============================================================================

/** Options for the {@code GroupNorm} module.
 * 
 *  Example:
 *  <pre>{@code
 *  GroupNorm model(GroupNormOptions(2, 2).eps(2e-5).affine(false));
 *  }</pre> */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class GroupNormOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GroupNormOptions(Pointer p) { super(p); }

  /* implicit */ public GroupNormOptions(@Cast("int64_t") long num_groups, @Cast("int64_t") long num_channels) { super((Pointer)null); allocate(num_groups, num_channels); }
private native void allocate(@Cast("int64_t") long num_groups, @Cast("int64_t") long num_channels);

  /** number of groups to separate the channels into */
  /** number of channels expected in input */
  /** a value added to the denominator for numerical stability. Default: 1e-5 */
  /** a boolean value that when set to {@code }true{@code }, this module
   *  has learnable per-channel affine parameters initialized to ones (for weights)
   *  and zeros (for biases). Default: {@code }true{@code }. */
}
