// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;


/** Options for the {@code Embedding} module.
 * 
 *  Example:
 *  <pre>{@code
 *  Embedding model(EmbeddingOptions(10, 2).padding_idx(3).max_norm(2).norm_type(2.5).scale_grad_by_freq(true).sparse(true));
 *  }</pre> */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class EmbeddingOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EmbeddingOptions(Pointer p) { super(p); }

  public EmbeddingOptions(@Cast("int64_t") long num_embeddings, @Cast("int64_t") long embedding_dim) { super((Pointer)null); allocate(num_embeddings, embedding_dim); }
  private native void allocate(@Cast("int64_t") long num_embeddings, @Cast("int64_t") long embedding_dim);

  /** The size of the dictionary of embeddings. */
  /** The size of each embedding vector. */
  /** If given, pads the output with the embedding vector at {@code padding_idx} (initialized to zeros) whenever it encounters the index. */
  /** If given, each embedding vector with norm larger than {@code max_norm} is renormalized to have norm {@code max_norm}. */
  /** The p of the p-norm to compute for the {@code max_norm} option. Default {@code }2{@code }. */
  /** If given, this will scale gradients by the inverse of frequency of the words in the mini-batch. Default {@code }false{@code }. */
  /** If {@code }true{@code }, gradient w.r.t. {@code weight} matrix will be a sparse tensor. */
  /** The learnable weights of the module of shape (num_embeddings, embedding_dim) */
}
