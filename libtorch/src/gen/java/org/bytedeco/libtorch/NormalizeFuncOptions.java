// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;


/** Options for {@code torch::nn::functional::normalize}.
 * 
 *  Example:
 *  <pre>{@code
 *  namespace F = torch::nn::functional;
 *  F::normalize(input, F::NormalizeFuncOptions().p(1).dim(-1));
 *  }</pre> */
@Namespace("torch::nn::functional") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class NormalizeFuncOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NormalizeFuncOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NormalizeFuncOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NormalizeFuncOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NormalizeFuncOptions position(long position) {
        return (NormalizeFuncOptions)super.position(position);
    }
    @Override public NormalizeFuncOptions getPointer(long i) {
        return new NormalizeFuncOptions(this).position(position + i);
    }

  /** The exponent value in the norm formulation. Default: 2.0 */
  /** The dimension to reduce. Default: 1 */
  /** Small value to avoid division by zero. Default: 1e-12 */
  /** the output tensor. If {@code out} is used, this
   *  operation won't be differentiable. */
}
