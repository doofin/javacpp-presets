// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.libtorch.global.libtorch.IntArrayRef;


@Namespace("at") @NoOffset @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class TensorGeometry extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TensorGeometry(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TensorGeometry(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public TensorGeometry position(long position) {
        return (TensorGeometry)super.position(position);
    }
    @Override public TensorGeometry getPointer(long i) {
        return new TensorGeometry(this).position(position + i);
    }

  public TensorGeometry() { super((Pointer)null); allocate(); }
  private native void allocate();

  public TensorGeometry(@ByVal IntArrayRef sizes) { super((Pointer)null); allocate(sizes); }
  private native void allocate(@ByVal IntArrayRef sizes);

  public TensorGeometry(@Const @ByRef Tensor t) { super((Pointer)null); allocate(t); }
  private native void allocate(@Const @ByRef Tensor t);

  // true if the tensor is contiguous
  public native @Cast("bool") boolean is_contiguous();

  public native @Cast("int64_t") long dim();
  public native @Cast("int64_t") long size(@Cast("int64_t") long dim);
  public native @ByVal IntArrayRef sizes();
  public native @Cast("int64_t") long stride(@Cast("int64_t") long dim);
  public native @ByVal IntArrayRef strides();
  public native @Cast("int64_t") long storage_offset();
  public native @Cast("int64_t") long numel();

  public native @ByVal TensorGeometry transpose(@Cast("int64_t") long dim0, @Cast("int64_t") long dim1);

  public native @ByRef LongVector sizes_(); public native TensorGeometry sizes_(LongVector setter);
  public native @ByRef LongVector strides_(); public native TensorGeometry strides_(LongVector setter);
  public native @Cast("int64_t") long storage_offset_(); public native TensorGeometry storage_offset_(long setter);
  public native @Cast("int64_t") long numel_(); public native TensorGeometry numel_(long setter);
}
