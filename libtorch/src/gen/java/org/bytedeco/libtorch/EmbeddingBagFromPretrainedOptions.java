// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;


// ============================================================================

/** Options for the {@code EmbeddingBag::from_pretrained} function. */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class EmbeddingBagFromPretrainedOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public EmbeddingBagFromPretrainedOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public EmbeddingBagFromPretrainedOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EmbeddingBagFromPretrainedOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public EmbeddingBagFromPretrainedOptions position(long position) {
        return (EmbeddingBagFromPretrainedOptions)super.position(position);
    }
    @Override public EmbeddingBagFromPretrainedOptions getPointer(long i) {
        return new EmbeddingBagFromPretrainedOptions(this).position(position + i);
    }

  /** If {@code }true{@code }, the tensor does not get updated in the learning process.
   *  Equivalent to {@code }embeddingbag.weight.requires_grad_(false){@code }. Default: {@code }true{@code } */
  /** If given, each embedding vector with norm larger than {@code max_norm} is renormalized to have norm {@code max_norm}. */
  /** The p of the p-norm to compute for the {@code max_norm} option. Default {@code }2{@code }. */
  /** If given, this will scale gradients by the inverse of frequency of the words in the mini-batch. Default {@code }false{@code }.
   *  Note: this option is not supported when {@code }mode="kMax"{@code }. */
  /** {@code }"kSum"{@code }, {@code }"kMean"{@code } or {@code }"kMax"{@code }. Specifies the way to reduce the bag. {@code }"kSum"{@code } computes the weighted sum, taking {@code per_sample_weights}
   *  into consideration. {@code }"kMean"{@code } computes the average of the values in the bag, {@code }"kMax"{@code } computes the max value over each bag. */
  /** If {@code }true{@code }, gradient w.r.t. {@code weight} matrix will be a sparse tensor.
   *  Note: this option is not supported when {@code }mode="kMax"{@code }. */
  /** If {@code }true{@code }, {@code offsets} has one additional element, where the last element
   *  is equivalent to the size of {@code indices}. This matches the CSR format. Note:
   *  this option is currently only supported when {@code }mode="sum"{@code }. */
}
