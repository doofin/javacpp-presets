// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.ByVal;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.javacpp.annotation.Name;
import org.bytedeco.javacpp.annotation.Properties;
 // namespace c10
@Name("std::hash<c10::DeviceType>") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class DeviceTypeMap extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DeviceTypeMap() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DeviceTypeMap(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DeviceTypeMap(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DeviceTypeMap position(long position) {
        return (DeviceTypeMap)super.position(position);
    }
    @Override public DeviceTypeMap getPointer(long i) {
        return new DeviceTypeMap(this).position(position + i);
    }

  public native @ByVal @Cast("std::size_t*") @Name("operator ()") long apply(@Cast("c10::DeviceType") short k);
}
