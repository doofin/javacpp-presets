// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Properties;
 // namespace functional

// ============================================================================

/** Options for the {@code CrossEntropyLoss} module.
 * 
 *  Example:
 *  <pre>{@code
 *  CrossEntropyLoss model(CrossEntropyLossOptions().ignore_index(-100).reduction(torch::kMean));
 *  }</pre> */
@Namespace("torch::nn") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class CrossEntropyLossOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CrossEntropyLossOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CrossEntropyLossOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CrossEntropyLossOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CrossEntropyLossOptions position(long position) {
        return (CrossEntropyLossOptions)super.position(position);
    }
    @Override public CrossEntropyLossOptions getPointer(long i) {
        return new CrossEntropyLossOptions(this).position(position + i);
    }


  /** A manual rescaling weight given to each class. If given, has to be a Tensor
   *  of size C */
  /** Specifies a target value that is ignored
   *  and does not contribute to the input gradient. */
  /** Specifies the reduction to apply to the output. Default: Mean */
}
