// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libtorch;

import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.javacpp.annotation.Name;
import org.bytedeco.javacpp.annotation.Properties;


@Name("c10::impl::ScalarTypeToCPPType<c10::ScalarType::Byte>") @Properties(inherit = org.bytedeco.libtorch.presets.libtorch.class)
public class ScalarTypeToCPPType extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ScalarTypeToCPPType() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ScalarTypeToCPPType(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ScalarTypeToCPPType(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ScalarTypeToCPPType position(long position) {
        return (ScalarTypeToCPPType)super.position(position);
    }
    @Override public ScalarTypeToCPPType getPointer(long i) {
        return new ScalarTypeToCPPType(this).position(position + i);
    }


  /* This is a workaround for the CUDA bug which prevents */
  /* ::detail::ScalarTypeToCType<T>::type being used directly due to */
  /* ambiguous reference which can't to be resolved. For some reason it */
  /* cant pick between at::detail and at::cuda::detail. */
  /* For repro example, please see: */
  /* https://gist.github.com/izdeby/952ae7cf256ddb740a73776d39a7e7ba */
  /* TODO: remove once the bug is fixed. */
  public static native @Cast("c10::impl::ScalarTypeToCPPType<c10::ScalarType::Byte>::type") byte t(); public static native void t(byte setter);
}
